% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/openmi.om.matrix.R
\name{openmi.om.matrix}
\alias{openmi.om.matrix}
\title{The base class for matrix/lokup table meta-model components.}
\value{
R6 class of type openmi.om.matrix
}
\description{
The base class for matrix/lokup table meta-model components.

The base class for matrix/lokup table meta-model components.
}
\examples{
NA
}
\seealso{

}
\section{Super classes}{
\code{\link[openmi.om:openmi.om.base]{openmi.om::openmi.om.base}} -> \code{\link[openmi.om:openmi.om.linkableComponent]{openmi.om::openmi.om.linkableComponent}} -> \code{openmi.om.matrix}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{datamatrix}}{holds the actual table}

\item{\code{colindex}}{holds the column lookup variable name (ustabe keycol1)}

\item{\code{rowindex}}{holds the column lookup variable name (ustabe keycol2)}

\item{\code{coltype}}{holds the column lookup type (ustabe lutype1)}

\item{\code{rowtype}}{holds the row lookup type (ustabe lutype2)}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-set_prop}{\code{openmi.om.matrix$set_prop()}}
\item \href{#method-parse_class_specific}{\code{openmi.om.matrix$parse_class_specific()}}
\item \href{#method-update}{\code{openmi.om.matrix$update()}}
\item \href{#method-findMatch}{\code{openmi.om.matrix$findMatch()}}
\item \href{#method-exactMatch}{\code{openmi.om.matrix$exactMatch()}}
\item \href{#method-interpolate}{\code{openmi.om.matrix$interpolate()}}
\item \href{#method-stairStep}{\code{openmi.om.matrix$stairStep()}}
\item \href{#method-window}{\code{openmi.om.matrix$window()}}
\item \href{#method-closest}{\code{openmi.om.matrix$closest()}}
\item \href{#method-init}{\code{openmi.om.matrix$init()}}
\item \href{#method-clone}{\code{openmi.om.matrix$clone()}}
}
}
\if{html}{
\out{<details ><summary>Inherited methods</summary>}
\itemize{
\item \out{<span class="pkg-link" data-pkg="openmi.om" data-topic="openmi.om.base" data-id="addComponent">}\href{../../openmi.om/html/openmi.om.base.html#method-addComponent}{\code{openmi.om::openmi.om.base$addComponent()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="openmi.om" data-topic="openmi.om.base" data-id="addInput">}\href{../../openmi.om/html/openmi.om.base.html#method-addInput}{\code{openmi.om::openmi.om.base$addInput()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="openmi.om" data-topic="openmi.om.base" data-id="add_component">}\href{../../openmi.om/html/openmi.om.base.html#method-add_component}{\code{openmi.om::openmi.om.base$add_component()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="openmi.om" data-topic="openmi.om.base" data-id="asJSON">}\href{../../openmi.om/html/openmi.om.base.html#method-asJSON}{\code{openmi.om::openmi.om.base$asJSON()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="openmi.om" data-topic="openmi.om.base" data-id="finish">}\href{../../openmi.om/html/openmi.om.base.html#method-finish}{\code{openmi.om::openmi.om.base$finish()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="openmi.om" data-topic="openmi.om.base" data-id="getInputs">}\href{../../openmi.om/html/openmi.om.base.html#method-getInputs}{\code{openmi.om::openmi.om.base$getInputs()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="openmi.om" data-topic="openmi.om.base" data-id="getValue">}\href{../../openmi.om/html/openmi.om.base.html#method-getValue}{\code{openmi.om::openmi.om.base$getValue()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="openmi.om" data-topic="openmi.om.base" data-id="get_component_id">}\href{../../openmi.om/html/openmi.om.base.html#method-get_component_id}{\code{openmi.om::openmi.om.base$get_component_id()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="openmi.om" data-topic="openmi.om.base" data-id="initialize">}\href{../../openmi.om/html/openmi.om.base.html#method-initialize}{\code{openmi.om::openmi.om.base$initialize()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="openmi.om" data-topic="openmi.om.base" data-id="logState">}\href{../../openmi.om/html/openmi.om.base.html#method-logState}{\code{openmi.om::openmi.om.base$logState()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="openmi.om" data-topic="openmi.om.base" data-id="log_debug">}\href{../../openmi.om/html/openmi.om.base.html#method-log_debug}{\code{openmi.om::openmi.om.base$log_debug()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="openmi.om" data-topic="openmi.om.base" data-id="orderOperations">}\href{../../openmi.om/html/openmi.om.base.html#method-orderOperations}{\code{openmi.om::openmi.om.base$orderOperations()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="openmi.om" data-topic="openmi.om.base" data-id="parse_openmi">}\href{../../openmi.om/html/openmi.om.base.html#method-parse_openmi}{\code{openmi.om::openmi.om.base$parse_openmi()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="openmi.om" data-topic="openmi.om.base" data-id="prepare">}\href{../../openmi.om/html/openmi.om.base.html#method-prepare}{\code{openmi.om::openmi.om.base$prepare()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="openmi.om" data-topic="openmi.om.base" data-id="set_sub_prop">}\href{../../openmi.om/html/openmi.om.base.html#method-set_sub_prop}{\code{openmi.om::openmi.om.base$set_sub_prop()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="openmi.om" data-topic="openmi.om.base" data-id="set_vars">}\href{../../openmi.om/html/openmi.om.base.html#method-set_vars}{\code{openmi.om::openmi.om.base$set_vars()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="openmi.om" data-topic="openmi.om.base" data-id="settable">}\href{../../openmi.om/html/openmi.om.base.html#method-settable}{\code{openmi.om::openmi.om.base$settable()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="openmi.om" data-topic="openmi.om.base" data-id="step">}\href{../../openmi.om/html/openmi.om.base.html#method-step}{\code{openmi.om::openmi.om.base$step()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="openmi.om" data-topic="openmi.om.base" data-id="stepChildren">}\href{../../openmi.om/html/openmi.om.base.html#method-stepChildren}{\code{openmi.om::openmi.om.base$stepChildren()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="openmi.om" data-topic="openmi.om.base" data-id="validate">}\href{../../openmi.om/html/openmi.om.base.html#method-validate}{\code{openmi.om::openmi.om.base$validate()}}\out{</span>}
}
\out{</details>}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-set_prop"></a>}}
\if{latex}{\out{\hypertarget{method-set_prop}{}}}
\subsection{Method \code{set_prop()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{openmi.om.matrix$set_prop(propname, propvalue, format = "raw")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{propname}}{which attribute}

\item{\code{propvalue}}{what value}

\item{\code{format}}{of propvalue}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
NA
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-parse_class_specific"></a>}}
\if{latex}{\out{\hypertarget{method-parse_class_specific}{}}}
\subsection{Method \code{parse_class_specific()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{openmi.om.matrix$parse_class_specific(propvalue)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{propvalue}}{from some custom classformat reading implementation}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
a settable data value
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-update"></a>}}
\if{latex}{\out{\hypertarget{method-update}{}}}
\subsection{Method \code{update()}}{
update does the lookup
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{openmi.om.matrix$update()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
NULL
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-findMatch"></a>}}
\if{latex}{\out{\hypertarget{method-findMatch}{}}}
\subsection{Method \code{findMatch()}}{
findMatch looks into a single dimension table
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{openmi.om.matrix$findMatch(dm, ixval, ixtype = 0)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{dm}}{array to search}

\item{\code{ixval}}{key to search for}

\item{\code{ixtype}}{what kind of lookup to perform?}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
matching value (with interpolation if ixtype allows it)
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-exactMatch"></a>}}
\if{latex}{\out{\hypertarget{method-exactMatch}{}}}
\subsection{Method \code{exactMatch()}}{
exactMatch looks for keys
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{openmi.om.matrix$exactMatch(dm, ixval, rectype = "row")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{dm}}{array to search}

\item{\code{ixval}}{key to search for}

\item{\code{rectype}}{what kind of array is dm?}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
matching value
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-interpolate"></a>}}
\if{latex}{\out{\hypertarget{method-interpolate}{}}}
\subsection{Method \code{interpolate()}}{
interpolate searches by key and calculates if no exact match
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{openmi.om.matrix$interpolate(dm, ixval)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{dm}}{array to search}

\item{\code{ixval}}{key to search for}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
interpolated value
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-stairStep"></a>}}
\if{latex}{\out{\hypertarget{method-stairStep}{}}}
\subsection{Method \code{stairStep()}}{
stairStep searches by key and select closest previous
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{openmi.om.matrix$stairStep(dm, ixval)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{dm}}{array to search}

\item{\code{ixval}}{key to search for}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
closest value
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-window"></a>}}
\if{latex}{\out{\hypertarget{method-window}{}}}
\subsection{Method \code{window()}}{
window does what???
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{openmi.om.matrix$window(dm, ixval, ixoff)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{dm}}{array to search}

\item{\code{ixval}}{key to search for}

\item{\code{ixoff}}{index offset}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
calculated value
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-closest"></a>}}
\if{latex}{\out{\hypertarget{method-closest}{}}}
\subsection{Method \code{closest()}}{
closest select closest value
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{openmi.om.matrix$closest(dm, ixval)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{dm}}{array to search}

\item{\code{ixval}}{key to search for}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
closest value
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-init"></a>}}
\if{latex}{\out{\hypertarget{method-init}{}}}
\subsection{Method \code{init()}}{
init sets up for viewing or run
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{openmi.om.matrix$init()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
NULL
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{openmi.om.matrix$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
