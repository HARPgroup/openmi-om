% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/openmi.om.timeSeriesInput.R
\name{openmi.om.timeSeriesInput}
\alias{openmi.om.timeSeriesInput}
\title{The base class for timeseries meta-model components.}
\value{
reference class of type openmi.om.timeSeriesInput
}
\description{
The base class for timeseries meta-model components.

The base class for timeseries meta-model components.
}
\examples{
NA
}
\section{Super classes}{
\code{\link[openmi.om:openmi.om.base]{openmi.om::openmi.om.base}} -> \code{\link[openmi.om:openmi.om.linkableComponent]{openmi.om::openmi.om.linkableComponent}} -> \code{openmi.om.timeSeriesInput}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{tsvalues}}{holds the timeseries data}

\item{\code{intmethod}}{describes how to handle when current time does not match table exactly}

\item{\code{intflag}}{0 - always interpolate, 1 - never interpolate, 2 - interpolate up to a distance of ilimit seconds}

\item{\code{ilimit}}{interpolation/extrapolation limit}

\item{\code{tscols}}{fields in source timeseries dataset}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-init}{\code{openmi.om.timeSeriesInput$init()}}
\item \href{#method-set_names}{\code{openmi.om.timeSeriesInput$set_names()}}
\item \href{#method-getInputs}{\code{openmi.om.timeSeriesInput$getInputs()}}
\item \href{#method-clone}{\code{openmi.om.timeSeriesInput$clone()}}
}
}
\if{html}{
\out{<details ><summary>Inherited methods</summary>}
\itemize{
\item \out{<span class="pkg-link" data-pkg="openmi.om" data-topic="openmi.om.base" data-id="addComponent">}\href{../../openmi.om/html/openmi.om.base.html#method-addComponent}{\code{openmi.om::openmi.om.base$addComponent()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="openmi.om" data-topic="openmi.om.base" data-id="addInput">}\href{../../openmi.om/html/openmi.om.base.html#method-addInput}{\code{openmi.om::openmi.om.base$addInput()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="openmi.om" data-topic="openmi.om.base" data-id="add_component">}\href{../../openmi.om/html/openmi.om.base.html#method-add_component}{\code{openmi.om::openmi.om.base$add_component()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="openmi.om" data-topic="openmi.om.base" data-id="asJSON">}\href{../../openmi.om/html/openmi.om.base.html#method-asJSON}{\code{openmi.om::openmi.om.base$asJSON()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="openmi.om" data-topic="openmi.om.base" data-id="finish">}\href{../../openmi.om/html/openmi.om.base.html#method-finish}{\code{openmi.om::openmi.om.base$finish()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="openmi.om" data-topic="openmi.om.base" data-id="getValue">}\href{../../openmi.om/html/openmi.om.base.html#method-getValue}{\code{openmi.om::openmi.om.base$getValue()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="openmi.om" data-topic="openmi.om.base" data-id="get_component_id">}\href{../../openmi.om/html/openmi.om.base.html#method-get_component_id}{\code{openmi.om::openmi.om.base$get_component_id()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="openmi.om" data-topic="openmi.om.base" data-id="initialize">}\href{../../openmi.om/html/openmi.om.base.html#method-initialize}{\code{openmi.om::openmi.om.base$initialize()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="openmi.om" data-topic="openmi.om.base" data-id="logState">}\href{../../openmi.om/html/openmi.om.base.html#method-logState}{\code{openmi.om::openmi.om.base$logState()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="openmi.om" data-topic="openmi.om.base" data-id="log_debug">}\href{../../openmi.om/html/openmi.om.base.html#method-log_debug}{\code{openmi.om::openmi.om.base$log_debug()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="openmi.om" data-topic="openmi.om.base" data-id="orderOperations">}\href{../../openmi.om/html/openmi.om.base.html#method-orderOperations}{\code{openmi.om::openmi.om.base$orderOperations()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="openmi.om" data-topic="openmi.om.base" data-id="parse_class_specific">}\href{../../openmi.om/html/openmi.om.base.html#method-parse_class_specific}{\code{openmi.om::openmi.om.base$parse_class_specific()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="openmi.om" data-topic="openmi.om.base" data-id="parse_openmi">}\href{../../openmi.om/html/openmi.om.base.html#method-parse_openmi}{\code{openmi.om::openmi.om.base$parse_openmi()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="openmi.om" data-topic="openmi.om.base" data-id="prepare">}\href{../../openmi.om/html/openmi.om.base.html#method-prepare}{\code{openmi.om::openmi.om.base$prepare()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="openmi.om" data-topic="openmi.om.base" data-id="set_prop">}\href{../../openmi.om/html/openmi.om.base.html#method-set_prop}{\code{openmi.om::openmi.om.base$set_prop()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="openmi.om" data-topic="openmi.om.base" data-id="set_sub_prop">}\href{../../openmi.om/html/openmi.om.base.html#method-set_sub_prop}{\code{openmi.om::openmi.om.base$set_sub_prop()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="openmi.om" data-topic="openmi.om.base" data-id="set_vars">}\href{../../openmi.om/html/openmi.om.base.html#method-set_vars}{\code{openmi.om::openmi.om.base$set_vars()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="openmi.om" data-topic="openmi.om.base" data-id="settable">}\href{../../openmi.om/html/openmi.om.base.html#method-settable}{\code{openmi.om::openmi.om.base$settable()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="openmi.om" data-topic="openmi.om.base" data-id="step">}\href{../../openmi.om/html/openmi.om.base.html#method-step}{\code{openmi.om::openmi.om.base$step()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="openmi.om" data-topic="openmi.om.base" data-id="stepChildren">}\href{../../openmi.om/html/openmi.om.base.html#method-stepChildren}{\code{openmi.om::openmi.om.base$stepChildren()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="openmi.om" data-topic="openmi.om.base" data-id="update">}\href{../../openmi.om/html/openmi.om.base.html#method-update}{\code{openmi.om::openmi.om.base$update()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="openmi.om" data-topic="openmi.om.base" data-id="validate">}\href{../../openmi.om/html/openmi.om.base.html#method-validate}{\code{openmi.om::openmi.om.base$validate()}}\out{</span>}
}
\out{</details>}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-init"></a>}}
\if{latex}{\out{\hypertarget{method-init}{}}}
\subsection{Method \code{init()}}{
init sets up for viewing or run
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{openmi.om.timeSeriesInput$init()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
NULL
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-set_names"></a>}}
\if{latex}{\out{\hypertarget{method-set_names}{}}}
\subsection{Method \code{set_names()}}{
set_names sets up tscols from timeseries source
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{openmi.om.timeSeriesInput$set_names()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
NULL
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getInputs"></a>}}
\if{latex}{\out{\hypertarget{method-getInputs}{}}}
\subsection{Method \code{getInputs()}}{
add timeseries values to the data array
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{openmi.om.timeSeriesInput$getInputs()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
NULL
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{openmi.om.timeSeriesInput$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
