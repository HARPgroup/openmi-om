% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/openmi.om.channelObject.R
\name{openmi.om.channelObject}
\alias{openmi.om.channelObject}
\title{The base class for executable equation based meta-model components.}
\value{
reference class of type openmi.om.channelObject
}
\description{
The base class for executable equation based meta-model components.

The base class for executable equation based meta-model components.
}
\examples{
NA
}
\seealso{

}
\section{Super classes}{
\code{\link[openmi.om:openmi.om.base]{openmi.om::openmi.om.base}} -> \code{\link[openmi.om:openmi.om.linkableComponent]{openmi.om::openmi.om.linkableComponent}} -> \code{openmi.om.channelObject}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{area}}{the drainage area to this channel (square miles)}

\item{\code{length}}{the length of the channel segment (ft)}

\item{\code{base}}{the channel bottom base in feet (used for trapezoidal or rectangular)}

\item{\code{Z}}{side slope}

\item{\code{slope}}{channel slope}

\item{\code{n}}{Manning's roughness coefficient}

\item{\code{substrateclass}}{substrate class (USGS hab model aram, A, B, C, D)}

\item{\code{channeltype}}{channel shape (only trapezoidal channels, type=2 are currently supported)}

\item{\code{storageinitialized}}{is the storage initialized on first exec?}

\item{\code{pdepth}}{mean pool depth below channel bottom}

\item{\code{tol}}{solution exactness tolerance to stop iterating.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-settable}{\code{openmi.om.channelObject$settable()}}
\item \href{#method-new}{\code{openmi.om.channelObject$new()}}
\item \href{#method-init}{\code{openmi.om.channelObject$init()}}
\item \href{#method-update}{\code{openmi.om.channelObject$update()}}
\item \href{#method-evaluate}{\code{openmi.om.channelObject$evaluate()}}
\item \href{#method-evaluate_heat}{\code{openmi.om.channelObject$evaluate_heat()}}
\item \href{#method-clone}{\code{openmi.om.channelObject$clone()}}
}
}
\if{html}{
\out{<details ><summary>Inherited methods</summary>}
\itemize{
\item \out{<span class="pkg-link" data-pkg="openmi.om" data-topic="openmi.om.base" data-id="addComponent">}\href{../../openmi.om/html/openmi.om.base.html#method-addComponent}{\code{openmi.om::openmi.om.base$addComponent()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="openmi.om" data-topic="openmi.om.base" data-id="addInput">}\href{../../openmi.om/html/openmi.om.base.html#method-addInput}{\code{openmi.om::openmi.om.base$addInput()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="openmi.om" data-topic="openmi.om.base" data-id="add_component">}\href{../../openmi.om/html/openmi.om.base.html#method-add_component}{\code{openmi.om::openmi.om.base$add_component()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="openmi.om" data-topic="openmi.om.base" data-id="asJSON">}\href{../../openmi.om/html/openmi.om.base.html#method-asJSON}{\code{openmi.om::openmi.om.base$asJSON()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="openmi.om" data-topic="openmi.om.base" data-id="finish">}\href{../../openmi.om/html/openmi.om.base.html#method-finish}{\code{openmi.om::openmi.om.base$finish()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="openmi.om" data-topic="openmi.om.base" data-id="getInputs">}\href{../../openmi.om/html/openmi.om.base.html#method-getInputs}{\code{openmi.om::openmi.om.base$getInputs()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="openmi.om" data-topic="openmi.om.base" data-id="getValue">}\href{../../openmi.om/html/openmi.om.base.html#method-getValue}{\code{openmi.om::openmi.om.base$getValue()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="openmi.om" data-topic="openmi.om.base" data-id="get_component_id">}\href{../../openmi.om/html/openmi.om.base.html#method-get_component_id}{\code{openmi.om::openmi.om.base$get_component_id()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="openmi.om" data-topic="openmi.om.base" data-id="logState">}\href{../../openmi.om/html/openmi.om.base.html#method-logState}{\code{openmi.om::openmi.om.base$logState()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="openmi.om" data-topic="openmi.om.base" data-id="log_debug">}\href{../../openmi.om/html/openmi.om.base.html#method-log_debug}{\code{openmi.om::openmi.om.base$log_debug()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="openmi.om" data-topic="openmi.om.base" data-id="orderOperations">}\href{../../openmi.om/html/openmi.om.base.html#method-orderOperations}{\code{openmi.om::openmi.om.base$orderOperations()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="openmi.om" data-topic="openmi.om.base" data-id="parse_class_specific">}\href{../../openmi.om/html/openmi.om.base.html#method-parse_class_specific}{\code{openmi.om::openmi.om.base$parse_class_specific()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="openmi.om" data-topic="openmi.om.base" data-id="parse_openmi">}\href{../../openmi.om/html/openmi.om.base.html#method-parse_openmi}{\code{openmi.om::openmi.om.base$parse_openmi()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="openmi.om" data-topic="openmi.om.base" data-id="prepare">}\href{../../openmi.om/html/openmi.om.base.html#method-prepare}{\code{openmi.om::openmi.om.base$prepare()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="openmi.om" data-topic="openmi.om.base" data-id="set_prop">}\href{../../openmi.om/html/openmi.om.base.html#method-set_prop}{\code{openmi.om::openmi.om.base$set_prop()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="openmi.om" data-topic="openmi.om.base" data-id="set_sub_prop">}\href{../../openmi.om/html/openmi.om.base.html#method-set_sub_prop}{\code{openmi.om::openmi.om.base$set_sub_prop()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="openmi.om" data-topic="openmi.om.base" data-id="set_vars">}\href{../../openmi.om/html/openmi.om.base.html#method-set_vars}{\code{openmi.om::openmi.om.base$set_vars()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="openmi.om" data-topic="openmi.om.base" data-id="step">}\href{../../openmi.om/html/openmi.om.base.html#method-step}{\code{openmi.om::openmi.om.base$step()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="openmi.om" data-topic="openmi.om.base" data-id="stepChildren">}\href{../../openmi.om/html/openmi.om.base.html#method-stepChildren}{\code{openmi.om::openmi.om.base$stepChildren()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="openmi.om" data-topic="openmi.om.base" data-id="validate">}\href{../../openmi.om/html/openmi.om.base.html#method-validate}{\code{openmi.om::openmi.om.base$validate()}}\out{</span>}
}
\out{</details>}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-settable"></a>}}
\if{latex}{\out{\hypertarget{method-settable}{}}}
\subsection{Method \code{settable()}}{
settable returns properties that can be set at initialize()
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{openmi.om.channelObject$settable()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
array c() of object property names
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
create new instance of channel object
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{openmi.om.channelObject$new(elem_list = list(), format = "raw")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{elem_list}}{list of attributes to set on object}

\item{\code{format}}{data format of elem_list}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
array c() of object property names
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-init"></a>}}
\if{latex}{\out{\hypertarget{method-init}{}}}
\subsection{Method \code{init()}}{
init sets up stream for model run
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{openmi.om.channelObject$init()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
NULL
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-update"></a>}}
\if{latex}{\out{\hypertarget{method-update}{}}}
\subsection{Method \code{update()}}{
update executes the parsed equation, sets object value prop
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{openmi.om.channelObject$update()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
NULL
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-evaluate"></a>}}
\if{latex}{\out{\hypertarget{method-evaluate}{}}}
\subsection{Method \code{evaluate()}}{
evaluate is called by update, but can also be called if calling routine wants the value returned
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{openmi.om.channelObject$evaluate()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
value the result of the equation
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-evaluate_heat"></a>}}
\if{latex}{\out{\hypertarget{method-evaluate_heat}{}}}
\subsection{Method \code{evaluate_heat()}}{
evaluate is called by update, but can also be called if calling routine wants the value returned
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{openmi.om.channelObject$evaluate_heat()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
value the result of the equation
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{openmi.om.channelObject$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
