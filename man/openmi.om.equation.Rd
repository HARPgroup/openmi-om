% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/openmi.om.equation.R
\name{openmi.om.equation}
\alias{openmi.om.equation}
\title{The base class for executable equation based meta-model components.}
\value{
reference class of type openmi.om.equation
}
\description{
The base class for executable equation based meta-model components.

The base class for executable equation based meta-model components.
}
\examples{
NA
}
\seealso{

}
\section{Super classes}{
\code{\link[openmi.om:openmi.om.base]{openmi.om::openmi.om.base}} -> \code{\link[openmi.om:openmi.om.linkableComponent]{openmi.om::openmi.om.linkableComponent}} -> \code{openmi.om.equation}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{equation}}{the text based un-parsed equation}

\item{\code{eq}}{the ready to eval equation}

\item{\code{defaultvalue}}{value to set if null}

\item{\code{minvalue}}{minimum value to use if nonnegative = TRUE}

\item{\code{nonnegative}}{should result be constrained to positive only?}

\item{\code{numnull}}{counter of occurences of null evaluation for debugging}

\item{\code{arithmetic_operators}}{operators to allow in equations}

\item{\code{safe_envir}}{the set of values that are accessible to the equation during evaluation}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-settable}{\code{openmi.om.equation$settable()}}
\item \href{#method-new}{\code{openmi.om.equation$new()}}
\item \href{#method-get_operators}{\code{openmi.om.equation$get_operators()}}
\item \href{#method-set_prop}{\code{openmi.om.equation$set_prop()}}
\item \href{#method-init}{\code{openmi.om.equation$init()}}
\item \href{#method-parse}{\code{openmi.om.equation$parse()}}
\item \href{#method-set_vars}{\code{openmi.om.equation$set_vars()}}
\item \href{#method-update}{\code{openmi.om.equation$update()}}
\item \href{#method-evaluate}{\code{openmi.om.equation$evaluate()}}
\item \href{#method-clone}{\code{openmi.om.equation$clone()}}
}
}
\if{html}{
\out{<details ><summary>Inherited methods</summary>}
\itemize{
\item \out{<span class="pkg-link" data-pkg="openmi.om" data-topic="openmi.om.base" data-id="addComponent">}\href{../../openmi.om/html/openmi.om.base.html#method-addComponent}{\code{openmi.om::openmi.om.base$addComponent()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="openmi.om" data-topic="openmi.om.base" data-id="addInput">}\href{../../openmi.om/html/openmi.om.base.html#method-addInput}{\code{openmi.om::openmi.om.base$addInput()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="openmi.om" data-topic="openmi.om.base" data-id="add_component">}\href{../../openmi.om/html/openmi.om.base.html#method-add_component}{\code{openmi.om::openmi.om.base$add_component()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="openmi.om" data-topic="openmi.om.base" data-id="asJSON">}\href{../../openmi.om/html/openmi.om.base.html#method-asJSON}{\code{openmi.om::openmi.om.base$asJSON()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="openmi.om" data-topic="openmi.om.base" data-id="finish">}\href{../../openmi.om/html/openmi.om.base.html#method-finish}{\code{openmi.om::openmi.om.base$finish()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="openmi.om" data-topic="openmi.om.base" data-id="getInputs">}\href{../../openmi.om/html/openmi.om.base.html#method-getInputs}{\code{openmi.om::openmi.om.base$getInputs()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="openmi.om" data-topic="openmi.om.base" data-id="getValue">}\href{../../openmi.om/html/openmi.om.base.html#method-getValue}{\code{openmi.om::openmi.om.base$getValue()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="openmi.om" data-topic="openmi.om.base" data-id="get_component_id">}\href{../../openmi.om/html/openmi.om.base.html#method-get_component_id}{\code{openmi.om::openmi.om.base$get_component_id()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="openmi.om" data-topic="openmi.om.base" data-id="logState">}\href{../../openmi.om/html/openmi.om.base.html#method-logState}{\code{openmi.om::openmi.om.base$logState()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="openmi.om" data-topic="openmi.om.base" data-id="orderOperations">}\href{../../openmi.om/html/openmi.om.base.html#method-orderOperations}{\code{openmi.om::openmi.om.base$orderOperations()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="openmi.om" data-topic="openmi.om.base" data-id="parse_class_specific">}\href{../../openmi.om/html/openmi.om.base.html#method-parse_class_specific}{\code{openmi.om::openmi.om.base$parse_class_specific()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="openmi.om" data-topic="openmi.om.base" data-id="parse_openmi">}\href{../../openmi.om/html/openmi.om.base.html#method-parse_openmi}{\code{openmi.om::openmi.om.base$parse_openmi()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="openmi.om" data-topic="openmi.om.base" data-id="prepare">}\href{../../openmi.om/html/openmi.om.base.html#method-prepare}{\code{openmi.om::openmi.om.base$prepare()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="openmi.om" data-topic="openmi.om.base" data-id="set_sub_prop">}\href{../../openmi.om/html/openmi.om.base.html#method-set_sub_prop}{\code{openmi.om::openmi.om.base$set_sub_prop()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="openmi.om" data-topic="openmi.om.base" data-id="validate">}\href{../../openmi.om/html/openmi.om.base.html#method-validate}{\code{openmi.om::openmi.om.base$validate()}}\out{</span>}
}
\out{</details>}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-settable"></a>}}
\if{latex}{\out{\hypertarget{method-settable}{}}}
\subsection{Method \code{settable()}}{
settable returns properties that can be set
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{openmi.om.equation$settable()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
array c() of object property names
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
create new instance of equation object
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{openmi.om.equation$new(elem_list = list(), format = "raw")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{elem_list}}{list of attributes to set on object}

\item{\code{format}}{data format of elem_list}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
array c() of object property names
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_operators"></a>}}
\if{latex}{\out{\hypertarget{method-get_operators}{}}}
\subsection{Method \code{get_operators()}}{
get_operators returns list of valid functions
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{openmi.om.equation$get_operators()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
array c() of function names
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-set_prop"></a>}}
\if{latex}{\out{\hypertarget{method-set_prop}{}}}
\subsection{Method \code{set_prop()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{openmi.om.equation$set_prop(propname, propvalue, format = "raw")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{propname}}{which attribute}

\item{\code{propvalue}}{what value}

\item{\code{format}}{of propvalue}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
NA
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-init"></a>}}
\if{latex}{\out{\hypertarget{method-init}{}}}
\subsection{Method \code{init()}}{
init sets up data, parses equation and then passes on to parent class
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{openmi.om.equation$init()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
NULL
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-parse"></a>}}
\if{latex}{\out{\hypertarget{method-parse}{}}}
\subsection{Method \code{parse()}}{
parse parses equation
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{openmi.om.equation$parse()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
NULL
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-set_vars"></a>}}
\if{latex}{\out{\hypertarget{method-set_vars}{}}}
\subsection{Method \code{set_vars()}}{
set_vars finds all the input var names for this function
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{openmi.om.equation$set_vars()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
NULL
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-update"></a>}}
\if{latex}{\out{\hypertarget{method-update}{}}}
\subsection{Method \code{update()}}{
update executes the parsed equation, sets object value prop
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{openmi.om.equation$update()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
NULL
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-evaluate"></a>}}
\if{latex}{\out{\hypertarget{method-evaluate}{}}}
\subsection{Method \code{evaluate()}}{
evaluate is called by update, but can also b called if calling routine wants the value returned
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{openmi.om.equation$evaluate()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
value the result of the equation
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{openmi.om.equation$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
