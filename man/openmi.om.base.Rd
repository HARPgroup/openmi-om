% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/openmi.om.base.R
\name{openmi.om.base}
\alias{openmi.om.base}
\title{The base object class for meta-model components}
\value{
R6 class of type openmi.om.base
}
\description{
Class providing the minimum attributes and methods for a model component
}
\details{
Has standard methods for iterating through timesteps and connecting with other components
}
\examples{
NA
}
\seealso{
NA
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{name}}{is a unique identifier for this controller}

\item{\code{code}}{is a unique identifier for this controller}

\item{\code{debug}}{mode on/off}

\item{\code{value}}{at current instance}

\item{\code{data}}{from the larger context, including the parent. was arData in om}

\item{\code{state}}{this objects local state. was state in om}

\item{\code{inputs}}{linked to this object}

\item{\code{components}}{contained by this object}

\item{\code{host}}{name}

\item{\code{type}}{of component}

\item{\code{compid}}{is a unique identifier in this simulation domain}

\item{\code{vars}}{is an array of variables that this requires for solving, determines op order}

\item{\code{timer}}{is the object keepign time in simulation (set by parent controller)}

\item{\code{id}}{is identifier (compid, name duplicates?)}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{openmi.om.base$new()}}
\item \href{#method-settable}{\code{openmi.om.base$settable()}}
\item \href{#method-set_prop}{\code{openmi.om.base$set_prop()}}
\item \href{#method-parse_openmi}{\code{openmi.om.base$parse_openmi()}}
\item \href{#method-parse_class_specific}{\code{openmi.om.base$parse_class_specific()}}
\item \href{#method-set_sub_prop}{\code{openmi.om.base$set_sub_prop()}}
\item \href{#method-init}{\code{openmi.om.base$init()}}
\item \href{#method-set_vars}{\code{openmi.om.base$set_vars()}}
\item \href{#method-log_debug}{\code{openmi.om.base$log_debug()}}
\item \href{#method-getInputs}{\code{openmi.om.base$getInputs()}}
\item \href{#method-prepare}{\code{openmi.om.base$prepare()}}
\item \href{#method-step}{\code{openmi.om.base$step()}}
\item \href{#method-stepChildren}{\code{openmi.om.base$stepChildren()}}
\item \href{#method-update}{\code{openmi.om.base$update()}}
\item \href{#method-finish}{\code{openmi.om.base$finish()}}
\item \href{#method-validate}{\code{openmi.om.base$validate()}}
\item \href{#method-logState}{\code{openmi.om.base$logState()}}
\item \href{#method-getValue}{\code{openmi.om.base$getValue()}}
\item \href{#method-addInput}{\code{openmi.om.base$addInput()}}
\item \href{#method-addComponent}{\code{openmi.om.base$addComponent()}}
\item \href{#method-add_component}{\code{openmi.om.base$add_component()}}
\item \href{#method-get_component_id}{\code{openmi.om.base$get_component_id()}}
\item \href{#method-orderOperations}{\code{openmi.om.base$orderOperations()}}
\item \href{#method-asJSON}{\code{openmi.om.base$asJSON()}}
\item \href{#method-clone}{\code{openmi.om.base$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{openmi.om.base$new(elem_list = list(), format = "raw")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{elem_list}}{which properties to set on creation}

\item{\code{format}}{format of elem_list}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
R6 class object
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-settable"></a>}}
\if{latex}{\out{\hypertarget{method-settable}{}}}
\subsection{Method \code{settable()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{openmi.om.base$settable()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
array of settable properties
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-set_prop"></a>}}
\if{latex}{\out{\hypertarget{method-set_prop}{}}}
\subsection{Method \code{set_prop()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{openmi.om.base$set_prop(propname, propvalue, format = "raw")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{propname}}{which attribute}

\item{\code{propvalue}}{what value}

\item{\code{format}}{of propvalue}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
NA
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-parse_openmi"></a>}}
\if{latex}{\out{\hypertarget{method-parse_openmi}{}}}
\subsection{Method \code{parse_openmi()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{openmi.om.base$parse_openmi(propvalue)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{propvalue}}{openmi formatted property list}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
a settable data value from openmi json type data description
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-parse_class_specific"></a>}}
\if{latex}{\out{\hypertarget{method-parse_class_specific}{}}}
\subsection{Method \code{parse_class_specific()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{openmi.om.base$parse_class_specific(propvalue)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{propvalue}}{from some custom classformat reading implementation}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
a settable data value
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-set_sub_prop"></a>}}
\if{latex}{\out{\hypertarget{method-set_sub_prop}{}}}
\subsection{Method \code{set_sub_prop()}}{
set the value of a contained component (not a local class attribute)
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{openmi.om.base$set_sub_prop(propname, propvalue, format = "raw")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{propname}}{which attribute}

\item{\code{propvalue}}{what value}

\item{\code{format}}{of propvalue}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
a settable data value
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-init"></a>}}
\if{latex}{\out{\hypertarget{method-init}{}}}
\subsection{Method \code{init()}}{
initialize this component after first object creation
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{openmi.om.base$init()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
NULL
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-set_vars"></a>}}
\if{latex}{\out{\hypertarget{method-set_vars}{}}}
\subsection{Method \code{set_vars()}}{
set_vars finds all the input var names for this function
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{openmi.om.base$set_vars()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
NULL
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-log_debug"></a>}}
\if{latex}{\out{\hypertarget{method-log_debug}{}}}
\subsection{Method \code{log_debug()}}{
log_debug handles debug info
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{openmi.om.base$log_debug(debug_mesg)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{debug_mesg}}{message to add to logger}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
NULL
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getInputs"></a>}}
\if{latex}{\out{\hypertarget{method-getInputs}{}}}
\subsection{Method \code{getInputs()}}{
get all input values from linked components
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{openmi.om.base$getInputs()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
NULL
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-prepare"></a>}}
\if{latex}{\out{\hypertarget{method-prepare}{}}}
\subsection{Method \code{prepare()}}{
execute things to do before model timestep execution
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{openmi.om.base$prepare()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
NULL
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-step"></a>}}
\if{latex}{\out{\hypertarget{method-step}{}}}
\subsection{Method \code{step()}}{
perform model timestep execution
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{openmi.om.base$step()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
NULL
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-stepChildren"></a>}}
\if{latex}{\out{\hypertarget{method-stepChildren}{}}}
\subsection{Method \code{stepChildren()}}{
execute child model timestep code
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{openmi.om.base$stepChildren()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
NULL
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-update"></a>}}
\if{latex}{\out{\hypertarget{method-update}{}}}
\subsection{Method \code{update()}}{
execute model timestep code
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{openmi.om.base$update()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
NULL
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-finish"></a>}}
\if{latex}{\out{\hypertarget{method-finish}{}}}
\subsection{Method \code{finish()}}{
do things at end of model step
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{openmi.om.base$finish()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
NULL
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-validate"></a>}}
\if{latex}{\out{\hypertarget{method-validate}{}}}
\subsection{Method \code{validate()}}{
Is this object valid?
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{openmi.om.base$validate()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
logical TRUE/FALSE
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-logState"></a>}}
\if{latex}{\out{\hypertarget{method-logState}{}}}
\subsection{Method \code{logState()}}{
log data at end of timestep
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{openmi.om.base$logState()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
NULL
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getValue"></a>}}
\if{latex}{\out{\hypertarget{method-getValue}{}}}
\subsection{Method \code{getValue()}}{
get value of this object currently
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{openmi.om.base$getValue(name = "value")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{name}}{a specific name from the state array, not just the default. TBD}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
value
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-addInput"></a>}}
\if{latex}{\out{\hypertarget{method-addInput}{}}}
\subsection{Method \code{addInput()}}{
connect an input to this component
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{openmi.om.base$addInput(
  local_name = character(),
  object = openmi.om.base,
  remote_name = "",
  input_type = "numeric"
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{local_name}}{name that will be referred to in local contest}

\item{\code{object}}{is the actual R6 class to connect to}

\item{\code{remote_name}}{is what property on the remote object are we accessing}

\item{\code{input_type}}{is this is a number (most common), text or other?}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
value
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-addComponent"></a>}}
\if{latex}{\out{\hypertarget{method-addComponent}{}}}
\subsection{Method \code{addComponent()}}{
add a contained sub-component (i.e. not linked)
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{openmi.om.base$addComponent(thiscomp = openmi.om.base)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{thiscomp}}{an R6 classof open.mi type}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
value
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-add_component"></a>}}
\if{latex}{\out{\hypertarget{method-add_component}{}}}
\subsection{Method \code{add_component()}}{
add a contained sub-component (i.e. not linked)
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{openmi.om.base$add_component(thiscomp = openmi.om.base)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{thiscomp}}{an R6 classof open.mi type}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
components are small objects that reside inside this object
}

\subsection{Returns}{
NULL
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_component_id"></a>}}
\if{latex}{\out{\hypertarget{method-get_component_id}{}}}
\subsection{Method \code{get_component_id()}}{
return unique ID of component
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{openmi.om.base$get_component_id(thiscomp)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{thiscomp}}{an R6 classof open.mi type}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
integer
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-orderOperations"></a>}}
\if{latex}{\out{\hypertarget{method-orderOperations}{}}}
\subsection{Method \code{orderOperations()}}{
order contained sub-components
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{openmi.om.base$orderOperations()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
NULL
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-asJSON"></a>}}
\if{latex}{\out{\hypertarget{method-asJSON}{}}}
\subsection{Method \code{asJSON()}}{
format this object as openmi json
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{openmi.om.base$asJSON()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
json text
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{openmi.om.base$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
