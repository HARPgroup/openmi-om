% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/openmi.om.runtimeController.R
\name{openmi.om.runtimeController}
\alias{openmi.om.runtimeController}
\title{The base class for meta-model simulation control.}
\value{
R6 class of type openmi.om.runtimeController
}
\description{
Class providing a runnable model controller
}
\details{
Will iterate through time steps from model timer start to end time, executing all child components
}
\examples{
NA
}
\seealso{
NA
}
\section{Super classes}{
\code{\link[openmi.om:openmi.om.base]{openmi.om::openmi.om.base}} -> \code{\link[openmi.om:openmi.om.linkableComponent]{openmi.om::openmi.om.linkableComponent}} -> \code{openmi.om.runtimeController}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{openmi.om.runtimeController$new()}}
\item \href{#method-checkRunVars}{\code{openmi.om.runtimeController$checkRunVars()}}
\item \href{#method-run}{\code{openmi.om.runtimeController$run()}}
\item \href{#method-update}{\code{openmi.om.runtimeController$update()}}
\item \href{#method-init}{\code{openmi.om.runtimeController$init()}}
\item \href{#method-clone}{\code{openmi.om.runtimeController$clone()}}
}
}
\if{html}{
\out{<details ><summary>Inherited methods</summary>}
\itemize{
\item \out{<span class="pkg-link" data-pkg="openmi.om" data-topic="openmi.om.base" data-id="addComponent">}\href{../../openmi.om/html/openmi.om.base.html#method-addComponent}{\code{openmi.om::openmi.om.base$addComponent()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="openmi.om" data-topic="openmi.om.base" data-id="addInput">}\href{../../openmi.om/html/openmi.om.base.html#method-addInput}{\code{openmi.om::openmi.om.base$addInput()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="openmi.om" data-topic="openmi.om.base" data-id="add_component">}\href{../../openmi.om/html/openmi.om.base.html#method-add_component}{\code{openmi.om::openmi.om.base$add_component()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="openmi.om" data-topic="openmi.om.base" data-id="asJSON">}\href{../../openmi.om/html/openmi.om.base.html#method-asJSON}{\code{openmi.om::openmi.om.base$asJSON()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="openmi.om" data-topic="openmi.om.base" data-id="finish">}\href{../../openmi.om/html/openmi.om.base.html#method-finish}{\code{openmi.om::openmi.om.base$finish()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="openmi.om" data-topic="openmi.om.base" data-id="getInputs">}\href{../../openmi.om/html/openmi.om.base.html#method-getInputs}{\code{openmi.om::openmi.om.base$getInputs()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="openmi.om" data-topic="openmi.om.base" data-id="getValue">}\href{../../openmi.om/html/openmi.om.base.html#method-getValue}{\code{openmi.om::openmi.om.base$getValue()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="openmi.om" data-topic="openmi.om.base" data-id="get_component_id">}\href{../../openmi.om/html/openmi.om.base.html#method-get_component_id}{\code{openmi.om::openmi.om.base$get_component_id()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="openmi.om" data-topic="openmi.om.base" data-id="logState">}\href{../../openmi.om/html/openmi.om.base.html#method-logState}{\code{openmi.om::openmi.om.base$logState()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="openmi.om" data-topic="openmi.om.base" data-id="orderOperations">}\href{../../openmi.om/html/openmi.om.base.html#method-orderOperations}{\code{openmi.om::openmi.om.base$orderOperations()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="openmi.om" data-topic="openmi.om.base" data-id="parse_class_specific">}\href{../../openmi.om/html/openmi.om.base.html#method-parse_class_specific}{\code{openmi.om::openmi.om.base$parse_class_specific()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="openmi.om" data-topic="openmi.om.base" data-id="parse_openmi">}\href{../../openmi.om/html/openmi.om.base.html#method-parse_openmi}{\code{openmi.om::openmi.om.base$parse_openmi()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="openmi.om" data-topic="openmi.om.base" data-id="prepare">}\href{../../openmi.om/html/openmi.om.base.html#method-prepare}{\code{openmi.om::openmi.om.base$prepare()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="openmi.om" data-topic="openmi.om.base" data-id="set_prop">}\href{../../openmi.om/html/openmi.om.base.html#method-set_prop}{\code{openmi.om::openmi.om.base$set_prop()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="openmi.om" data-topic="openmi.om.base" data-id="set_sub_prop">}\href{../../openmi.om/html/openmi.om.base.html#method-set_sub_prop}{\code{openmi.om::openmi.om.base$set_sub_prop()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="openmi.om" data-topic="openmi.om.base" data-id="settable">}\href{../../openmi.om/html/openmi.om.base.html#method-settable}{\code{openmi.om::openmi.om.base$settable()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="openmi.om" data-topic="openmi.om.base" data-id="validate">}\href{../../openmi.om/html/openmi.om.base.html#method-validate}{\code{openmi.om::openmi.om.base$validate()}}\out{</span>}
}
\out{</details>}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
create controller
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{openmi.om.runtimeController$new()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
R6 class
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-checkRunVars"></a>}}
\if{latex}{\out{\hypertarget{method-checkRunVars}{}}}
\subsection{Method \code{checkRunVars()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{openmi.om.runtimeController$checkRunVars()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
boolean if model variables are sufficient to run
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-run"></a>}}
\if{latex}{\out{\hypertarget{method-run}{}}}
\subsection{Method \code{run()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{openmi.om.runtimeController$run()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
NA
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-update"></a>}}
\if{latex}{\out{\hypertarget{method-update}{}}}
\subsection{Method \code{update()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{openmi.om.runtimeController$update()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
NA
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-init"></a>}}
\if{latex}{\out{\hypertarget{method-init}{}}}
\subsection{Method \code{init()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{openmi.om.runtimeController$init()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
NA
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{openmi.om.runtimeController$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
