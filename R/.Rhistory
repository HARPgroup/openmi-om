k$defaultvalue = 0
m$addComponent(k)
m$addComponent(l)
k$equation = "value + 1"
l$equation = "value + 2"
l$addInput('kval', k, 'value', 'numeric')
source("/usr/local/home/git/vahydro/om/R/package/classes.R")
# instantiate a version of om.equation
m <- om.omi.runtimeController();
k <- om.omi.equation();
l <- om.omi.equation();
k$equation = "value + 1"; # just add one to previous value
k$defaultvalue = 0
m$addComponent(k)
m$addComponent(l)
k$equation = "value + 1"
l$equation = "value + 2"
l$addInput('kval', k, 'value', 'numeric')
l$inputs
l$inputs[["kval"]]
l$inputs[["kval"]][1]
l$inputs[["kval"]][0]
l$inputs[["kval"]][1]
source("/usr/local/home/git/vahydro/om/R/package/classes.R")
# instantiate a version of om.equation
m <- om.omi.runtimeController();
k <- om.omi.equation();
l <- om.omi.equation();
k$equation = "value + 1"; # just add one to previous value
k$defaultvalue = 0
m$addComponent(k)
m$addComponent(l)
k$equation = "value + 1"
l$equation = "value + 2"
l$addInput('kval', k, 'value', 'numeric')
l$inputs[["kval"]][1]
l$inputs[["kval"]]
source("/usr/local/home/git/vahydro/om/R/package/classes.R")
# instantiate a version of om.equation
m <- om.omi.runtimeController();
k <- om.omi.equation();
l <- om.omi.equation();
k$equation = "value + 1"; # just add one to previous value
k$defaultvalue = 0
m$addComponent(k)
m$addComponent(l)
k$equation = "value + 1"
l$equation = "value + 2"
l$addInput('kval', k, 'value', 'numeric')
l$inputs
l$inputs$kval
l$inputs$kval$object
l$inputs$kval$input_obj
l$inputs$kval[[1]]$input_obj
l$inputs$kval[[1]]$input_obj$getValue()
l$getInputs()
l$getInputs()
l$getInputs
l
l$getInputs()
source("/usr/local/home/git/vahydro/om/R/package/classes.R")
# instantiate a version of om.equation
m <- om.omi.runtimeController();
k <- om.omi.equation();
l <- om.omi.equation();
k$equation = "value + 1"; # just add one to previous value
k$defaultvalue = 0
m$addComponent(k)
m$addComponent(l)
k$equation = "value + 1"
l$equation = "value + 2"
l$addInput('kval', k, 'value', 'numeric')
l$getInputs()
l$getInputs()
l$getInputs()
l$getInputs()
l$inputs
l$inputs[[1]]
l$getInputs()
l$getInputs()
source("/usr/local/home/git/vahydro/om/R/package/classes.R")
# instantiate a version of om.equation
m <- om.omi.runtimeController();
k <- om.omi.equation();
l <- om.omi.equation();
k$equation = "value + 1"; # just add one to previous value
k$defaultvalue = 0
m$addComponent(k)
m$addComponent(l)
k$equation = "value + 1"
l$equation = "value + 2"
l$addInput('kval', k, 'value', 'numeric')
m$initialize()
l$getInputs()
source("/usr/local/home/git/vahydro/om/R/package/classes.R")
# instantiate a version of om.equation
m <- om.omi.runtimeController();
k <- om.omi.equation();
l <- om.omi.equation();
k$equation = "value + 1"; # just add one to previous value
k$defaultvalue = 0
m$addComponent(k)
m$addComponent(l)
k$equation = "value + 1"
l$equation = "value + 2"
l$addInput('kval', k, 'value', 'numeric')
m$initialize()
l$getInputs()
source("/usr/local/home/git/vahydro/om/R/package/classes.R")
# instantiate a version of om.equation
m <- om.omi.runtimeController();
k <- om.omi.equation();
l <- om.omi.equation();
k$equation = "value + 1"; # just add one to previous value
k$defaultvalue = 0
m$addComponent(k)
m$addComponent(l)
k$equation = "value + 1"
l$equation = "value + 2"
l$addInput('kval', k, 'value', 'numeric')
m$initialize()
l$getInputs()
source("/usr/local/home/git/vahydro/om/R/package/classes.R")
# instantiate a version of om.equation
m <- om.omi.runtimeController();
k <- om.omi.equation();
l <- om.omi.equation();
k$equation = "value + 1"; # just add one to previous value
k$defaultvalue = 0
m$addComponent(k)
m$addComponent(l)
k$equation = "value + 1"
l$equation = "value + 2"
l$addInput('kval', k, 'value', 'numeric')
m$initialize()
l$getInputs()
source("/usr/local/home/git/vahydro/om/R/package/classes.R")
# instantiate a version of om.equation
m <- om.omi.runtimeController();
k <- om.omi.equation();
l <- om.omi.equation();
k$equation = "value + 1"; # just add one to previous value
k$defaultvalue = 0
m$addComponent(k)
m$addComponent(l)
k$equation = "value + 1"
l$equation = "value + 2"
l$addInput('kval', k, 'value', 'numeric')
m$initialize()
l$getInputs()
source("/usr/local/home/git/vahydro/om/R/package/classes.R")
# instantiate a version of om.equation
m <- om.omi.runtimeController();
k <- om.omi.equation();
l <- om.omi.equation();
k$equation = "value + 1"; # just add one to previous value
k$defaultvalue = 0
m$addComponent(k)
m$addComponent(l)
k$equation = "value + 1"
l$equation = "value + 2"
l$addInput('kval', k, 'value', 'numeric')
m$initialize()
l$getInputs()
source("/usr/local/home/git/vahydro/om/R/package/classes.R")
# instantiate a version of om.equation
m <- om.omi.runtimeController();
k <- om.omi.equation();
l <- om.omi.equation();
k$equation = "value + 1"; # just add one to previous value
k$defaultvalue = 0
m$addComponent(k)
m$addComponent(l)
k$equation = "value + 1"
l$equation = "value + 2"
l$addInput('kval', k, 'value', 'numeric')
m$initialize()
l$getInputs()
source("/usr/local/home/git/vahydro/om/R/package/classes.R")
# instantiate a version of om.equation
m <- om.omi.runtimeController();
k <- om.omi.equation();
l <- om.omi.equation();
k$equation = "value + 1"; # just add one to previous value
k$defaultvalue = 0
m$addComponent(k)
m$addComponent(l)
k$equation = "value + 1"
l$equation = "value + 2"
l$addInput('kval', k, 'value', 'numeric')
m$initialize()
l$getInputs()
source("/usr/local/home/git/vahydro/om/R/package/classes.R")
# instantiate a version of om.equation
m <- om.omi.runtimeController();
k <- om.omi.equation();
l <- om.omi.equation();
k$equation = "value + 1"; # just add one to previous value
k$defaultvalue = 0
m$addComponent(k)
m$addComponent(l)
k$equation = "value + 1"
l$equation = "value + 2"
l$addInput('kval', k, 'value', 'numeric')
m$initialize()
l$getInputs()
source("/usr/local/home/git/vahydro/om/R/package/classes.R")
# instantiate a version of om.equation
m <- om.omi.runtimeController();
k <- om.omi.equation();
l <- om.omi.equation();
k$equation = "value + 1"; # just add one to previous value
k$defaultvalue = 0
m$addComponent(k)
m$addComponent(l)
k$equation = "value + 1"
l$equation = "value + 2"
l$addInput('kval', k, 'value', 'numeric')
m$initialize()
l$getInputs()
source("/usr/local/home/git/vahydro/om/R/package/classes.R")
# instantiate a version of om.equation
m <- om.omi.runtimeController();
k <- om.omi.equation();
l <- om.omi.equation();
k$equation = "value + 1"; # just add one to previous value
k$defaultvalue = 0
m$addComponent(k)
m$addComponent(l)
k$equation = "value + 1"
l$equation = "value + 2"
l$addInput('kval', k, 'value', 'numeric')
m$initialize()
l$getInputs()
source("/usr/local/home/git/vahydro/om/R/package/classes.R")
# instantiate a version of om.equation
m <- om.omi.runtimeController();
k <- om.omi.equation();
l <- om.omi.equation();
k$equation = "value + 1"; # just add one to previous value
k$defaultvalue = 0
m$addComponent(k)
m$addComponent(l)
k$equation = "value + 1"
l$equation = "value + 2"
l$addInput('kval', k, 'value', 'numeric')
m$initialize()
l$getInputs()
source("/usr/local/home/git/vahydro/om/R/package/classes.R")
# instantiate a version of om.equation
m <- om.omi.runtimeController();
k <- om.omi.equation();
l <- om.omi.equation();
k$equation = "value + 1"; # just add one to previous value
k$defaultvalue = 0
m$addComponent(k)
m$addComponent(l)
k$equation = "value + 1"
l$equation = "value + 2"
l$addInput('kval', k, 'value', 'numeric')
m$initialize()
l$getInputs()
source("/usr/local/home/git/vahydro/om/R/package/classes.R")
# instantiate a version of om.equation
m <- om.omi.runtimeController();
k <- om.omi.equation();
l <- om.omi.equation();
k$equation = "value + 1"; # just add one to previous value
k$defaultvalue = 0
m$addComponent(k)
m$addComponent(l)
k$equation = "value + 1"
l$equation = "value + 2"
l$addInput('kval', k, 'value', 'numeric')
m$initialize()
l$getInputs()
for (i in c(1:10)) {
m$update()
print(paste("At ts = ", i, " value = ", m$components[[1]]$value))
print(paste("At ts = ", i, " value = ", m$components[[2]]$value))
l$getInputs()
}
l$data
source("/usr/local/home/git/vahydro/om/R/package/classes.R")
# instantiate a version of om.equation
m <- om.omi.runtimeController();
k <- om.omi.equation();
l <- om.omi.equation();
k$equation = "value + 1"; # just add one to previous value
k$defaultvalue = 0
m$addComponent(k)
m$addComponent(l)
k$equation = "value + 1"
l$equation = "kval + 2"
l$addInput('kval', k, 'value', 'numeric')
m$initialize()
l$getInputs()
for (i in c(1:10)) {
m$update()
print(paste("At ts = ", i, " value = ", m$components[[1]]$value))
print(paste("At ts = ", i, " value = ", m$components[[2]]$value))
#l$getInputs()
}
2^4
source("/usr/local/home/git/vahydro/om/R/package/classes.R")
# instantiate a version of om.equation
m <- om.omi.runtimeController();
j <- om.omi.equation();
k <- om.omi.equation();
l <- om.omi.equation();
k$equation = "value + 1"; # just add one to previous value
k$defaultvalue = 0
m$addComponent(k)
m$addComponent(l)
k$equation = "value + 1"
l$equation = "kval + 2"
l$addInput('kval', k, 'value', 'numeric')
j$equation = "l^2"
j$addInput('l', l, 'value', 'numeric')
m$initialize()
for (i in c(1:10)) {
m$update()
print(paste("k @ ts = ", i, " value = ", m$components[[1]]$value))
print(paste("l @ ts = ", i, " value = ", m$components[[2]]$value))
print(paste("j @ ts = ", i, " value = ", m$components[[2]]$value))
#l$getInputs()
}
for (i in c(1:10)) {
m$update()
print(paste("k @ ts = ", i, " value = ", m$components[[1]]$value))
print(paste("l @ ts = ", i, " value = ", m$components[[2]]$value))
print(paste("j @ ts = ", i, " value = ", m$components[[3]]$value))
#l$getInputs()
}
source("/usr/local/home/git/vahydro/om/R/package/classes.R")
# instantiate a version of om.equation
m <- om.omi.runtimeController();
j <- om.omi.equation();
k <- om.omi.equation();
l <- om.omi.equation();
k$equation = "value + 1"; # just add one to previous value
k$defaultvalue = 0
m$addComponent(k)
m$addComponent(l)
m$addComponent(j)
k$equation = "value + 1"
l$equation = "kval + 2"
l$addInput('kval', k, 'value', 'numeric')
j$equation = "l^2"
j$addInput('l', l, 'value', 'numeric')
m$initialize()
for (i in c(1:10)) {
m$update()
print(paste("k @ ts = ", i, " value = ", m$components[[1]]$value))
print(paste("l @ ts = ", i, " value = ", m$components[[2]]$value))
print(paste("j @ ts = ", i, " value = ", m$components[[3]]$value))
#l$getInputs()
}
source("/usr/local/home/git/vahydro/om/R/package/classes.R")
# instantiate a version of om.equation
m <- om.omi.runtimeController();
j <- om.omi.equation();
k <- om.omi.equation();
l <- om.omi.equation();
k$equation = "value + 1"; # just add one to previous value
k$defaultvalue = 0
m$addComponent(k)
m$addComponent(l)
m$addComponent(j)
k$equation = "value + 1"
l$equation = "kval + 2"
l$addInput('kval', k, 'value', 'numeric')
j$equation = "k^2 + l"
j$addInput('k', k, 'value', 'numeric')
j$addInput('l', l, 'value', 'numeric')
m$initialize()
for (i in c(1:10)) {
m$update()
print(paste("k @ ts = ", i, " value = ", m$components[[1]]$value))
print(paste("l @ ts = ", i, " value = ", m$components[[2]]$value))
print(paste("j @ ts = ", i, " value = ", m$components[[3]]$value))
#l$getInputs()
}
for (i in c(1:10)) {
m$update()
print(paste("k @ ts = ", i, " value = ", m$components[[1]]$value))
print(paste("l @ ts = ", i, " value = ", m$components[[2]]$value))
print(paste("j @ ts = ", i, j$equation, " value = ", m$components[[3]]$value))
#l$getInputs()
}
for (i in c(1:10)) {
m$update()
print(paste("k @ ts = ", i, ",", k$equation, " value = ", m$components[[k$compid]]$value))
print(paste("l @ ts = ", i, ",", l$equation, " value = ", m$components[[2]]$value))
print(paste("j @ ts = ", i, ",", j$equation, " value = ", m$components[[3]]$value))
#l$getInputs()
}
for (i in c(1:10)) {
m$update()
print(paste("k @ ts = ", i, ",", k$equation, " value = ", m$components[k$compid]$value))
print(paste("l @ ts = ", i, ",", l$equation, " value = ", m$components[[2]]$value))
print(paste("j @ ts = ", i, ",", j$equation, " value = ", m$components[[3]]$value))
#l$getInputs()
}
for (i in c(1:10)) {
m$update()
print(paste("k @ ts = ", i, ",", k$equation, " value = ", m$components[[k$compid]]$value))
print(paste("l @ ts = ", i, ",", l$equation, " value = ", m$components[[l$compid]]$value))
print(paste("j @ ts = ", i, ",", j$equation, " value = ", m$components[[j$compid]]$value))
#l$getInputs()
}
k$compid
j$compid
l$compid
source("/usr/local/home/git/vahydro/om/R/package/classes.R")
# instantiate a version of om.equation
m <- om.omi.runtimeController();
j <- om.omi.equation();
k <- om.omi.equation();
l <- om.omi.equation();
k$defaultvalue = 0
m$addComponent(k)
m$addComponent(l)
m$addComponent(j)
k$equation = "value + 1"; # just add one to previous value
l$addInput('kval', k, 'value', 'numeric')
l$equation = "kval + 2"
j$addInput('k', k, 'value', 'numeric')
j$addInput('l', l, 'value', 'numeric')
j$equation = "k^2 + l"
m$initialize()
for (i in c(1:10)) {
m$update()
print(paste("k @ ts = ", i, ",", k$equation, " value = ", m$components[[k$compid]]$value))
print(paste("l @ ts = ", i, ",", l$equation, " value = ", m$components[[l$compid]]$value))
print(paste("j @ ts = ", i, ",", j$equation, " value = ", m$components[[j$compid]]$value))
#l$getInputs()
}
source("/usr/local/home/git/vahydro/om/R/package/classes.R")
# instantiate a version of om.equation
m <- openmi.om.runtimeController();
j <- openmi.om.equation();
k <- openmi.om.equation();
l <- openmi.om.equation();
k$defaultvalue = 0
m$addComponent(k)
m$addComponent(l)
m$addComponent(j)
k$equation = "value + 1"; # just add one to previous value
l$addInput('kval', k, 'value', 'numeric')
l$equation = "kval + 2"
j$addInput('k', k, 'value', 'numeric')
j$addInput('l', l, 'value', 'numeric')
j$equation = "k^2 + l"
m$initialize()
for (i in c(1:10)) {
m$update()
print(paste("k @ ts = ", i, ",", k$equation, " value = ", m$components[[k$compid]]$value))
print(paste("l @ ts = ", i, ",", l$equation, " value = ", m$components[[l$compid]]$value))
print(paste("j @ ts = ", i, ",", j$equation, " value = ", m$components[[j$compid]]$value))
#l$getInputs()
}
source("/usr/local/home/git/openmi-om/R/package/classes.R")
# instantiate a version of om.equation
m <- openmi.om.runtimeController();
j <- openmi.om.equation();
k <- openmi.om.equation();
l <- openmi.om.equation();
k$defaultvalue = 0
m$addComponent(k)
m$addComponent(l)
m$addComponent(j)
k$equation = "value + 1"; # just add one to previous value
l$addInput('kval', k, 'value', 'numeric')
l$equation = "kval + 2"
j$addInput('k', k, 'value', 'numeric')
j$addInput('l', l, 'value', 'numeric')
j$equation = "k^2 + l"
m$initialize()
for (i in c(1:10)) {
m$update()
print(paste("k @ ts = ", i, ",", k$equation, " value = ", m$components[[k$compid]]$value))
print(paste("l @ ts = ", i, ",", l$equation, " value = ", m$components[[l$compid]]$value))
print(paste("j @ ts = ", i, ",", j$equation, " value = ", m$components[[j$compid]]$value))
#l$getInputs()
}
install.packages("roxygen2")
set_wd('C:\usr\local\home\git')
set_wd('C:\\usr\\local\\home\\git')
setwd('C:\\usr\\local\\home\\git')
create("openmi-om")
library("Roxygen2")
library("roxygen2")
create("openmi-om")
library("devtools")
create("openmi-om")
create("openmi.om")
setwd('C:\\usr\\local\\home\\git')
ls()
pwd()
pwd
setwd(openmi-om)
setwd("openmi-om")
setwd("R")
setwd("openmi.om")
dodcument()
document()
setwd("..\/")
setwd("../")
build openmi.om
ls
library("openmi.om")
